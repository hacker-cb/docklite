---
description: Deployment and SSH access patterns
---

# Deployment Architecture

## SSH Deployment User

**User:** `docklite` (configurable via `DEPLOY_USER` env var)
**Projects Directory:** `/home/docklite/projects/` (configurable via `PROJECTS_DIR`)

Setup:
```bash
sudo ./setup-docklite-user.sh
```

## Project File Structure

Each project has its own directory:

```
/home/docklite/projects/{project_id}/
├── docker-compose.yml    # Created by DockLite from preset/custom
├── .env                  # Created from env_vars in DB
└── [user files]          # Uploaded via SSH
```

## Deployment Flow

1. User creates project in UI (gets project_id)
2. Click "Deploy Info" button → get commands
3. Upload files: `rsync -avz ./app/ docklite@server:/home/docklite/projects/{id}/`
4. Start containers: `ssh docklite@server "cd /home/docklite/projects/{id} && docker-compose up -d"`

## API Endpoints

- `GET /api/deployment/{id}/info` - get deployment instructions (protected)
- `GET /api/deployment/ssh-setup` - get SSH setup info

Returns ready-to-use commands with correct paths and server hostname.

## Docker Compose Templates (Presets)

Location: `backend/app/presets/`

14 presets in 4 categories:
- **web:** Nginx, Apache, Nginx Proxy
- **backend:** Node.js, FastAPI, Flask, Laravel
- **database:** PostgreSQL, MySQL, MongoDB, Redis
- **cms:** WordPress, Ghost, Strapi

Each preset includes:
- `compose_content` - docker-compose.yml template
- `default_env_vars` - pre-filled environment variables
- Variable substitution: `${PORT}`, `${DB_PASSWORD}`, etc.

## Important Notes

- Port field is NOT used (will use Nginx virtual hosts in Phase 5)
- Projects identified by integer ID, not name
- Docker socket mounted to backend: `/var/run/docker.sock`
- Backend needs access to projects directory
