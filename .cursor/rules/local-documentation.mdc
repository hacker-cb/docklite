---
description: DockLite documentation structure and maintenance rules
globs: ["*.md", "docs/**/*.md"]
tags: ["documentation"]
alwaysApply: true
---

# DockLite Documentation Guidelines

## Documentation Structure

### Core Documentation (Root .md files)

**User-facing documentation:**
- `README.md` - Main documentation, quick start, features overview
- `QUICKSTART.md` - Fast setup guide for new users
- `ARCHITECTURE.md` - System architecture, design decisions
- `TRAEFIK.md` - Traefik v3 integration guide
- `DEPLOY_GUIDE.md` - Production deployment instructions
- `SSH_ACCESS.md` - SSH setup and deployment workflow
- `HOW_TO_RUN_TESTS.md` - Testing guide
- `PRESETS.md` - Docker-compose presets documentation
- `SYSTEM_CONTAINERS_PROTECTION.md` - System containers protection guide

### Cursor Rules (.cursor/rules/)

**Development guidelines for AI:**
- Local rules (`local-*.mdc`) - DockLite-specific patterns
- Shared rules (`shared-*.mdc`) - Universal development practices

## Documentation Rules

### ✅ DO

1. **Update existing documentation** when features change
2. **Keep information in ONE place** - avoid duplication
3. **Use cursor rules** for development patterns and conventions
4. **Use README/guides** for user-facing documentation
5. **Keep current status** in `local-architecture.mdc`
6. **Document important decisions** in relevant .mdc files
7. **Update examples** when code patterns change

### ❌ DON'T

1. **NEVER create historical files** like:
   - `*_COMPLETE.md` - no completion reports
   - `*_MIGRATION*.md` - no migration logs
   - `SESSION_SUMMARY.md` - no session summaries
   - `CHANGELOG.md` - use git history instead
   - `STATUS.md`, `PROJECT_STATUS.md` - use local-architecture.mdc
   - `FINAL_REPORT.md`, `WORK_COMPLETE.md` - no work reports

2. **NEVER duplicate information** across files:
   - Architecture should be in `ARCHITECTURE.md` or `local-architecture.mdc`
   - Hostname system is in `local-access-urls.mdc`
   - Testing is in `HOW_TO_RUN_TESTS.md`
   - CLI patterns are in `local-cli-*.mdc` files

3. **NEVER create temporary/service files**:
   - `FILES_LIST.md` - redundant
   - `START_HERE.md`, `NEXT_SESSION.md` - use roadmap
   - `CURSOR_RULES_UPDATED.md` - use git commits

4. **NEVER create separate quickstart files** for subsystems:
   - `PYTHON_CLI_QUICKSTART.md` - use README.md
   - `DASHBOARD_QUICK_START.md` - use README.md

## Where to Document What

### User Guides → Root .md files

**README.md** - For:
- Quick start instructions
- Main features overview
- CLI commands reference
- Installation steps

**QUICKSTART.md** - For:
- Fast setup (5 minutes)
- Minimal configuration
- First admin creation

**[Feature].md** (TRAEFIK.md, SSH_ACCESS.md, etc.) - For:
- Detailed feature guides
- Configuration options
- Troubleshooting
- Examples

### Development Patterns → Cursor Rules (.mdc)

**Backend patterns:**
- API endpoint structure → `local-backend-api.mdc`
- Service patterns → `local-backend-*.mdc`

**Frontend patterns:**
- Component structure → `local-frontend-vue.mdc`
- API calls → `local-frontend-vue.mdc`

**CLI patterns:**
- Commands → `local-cli-*.mdc`

**Infrastructure:**
- Docker → `local-infra-docker.mdc`
- Deployment → `local-infra-deployment.mdc`

### Project Status → local-architecture.mdc

**Current status:**
- Completed features (brief list)
- Production readiness status

**Future plans:**
- Next phase description
- Upcoming features
- Future ideas (brief)

### Architecture Decisions → ARCHITECTURE.md

- System design
- Technology choices
- Key architectural patterns
- Trade-offs and rationale

## Updating Documentation

### When Adding a Feature

1. **Update code** + write tests
2. **Update cursor rules** if adding new pattern
3. **Update README.md** if user-facing command/feature
4. **Update relevant guide** if complex feature (TRAEFIK.md, etc.)
5. **Update roadmap** - move from "upcoming" to "current status"

### When Changing Behavior

1. **Update affected code** + update tests
2. **Search and update** all mentions in cursor rules
3. **Update user guides** if user-visible change
4. **Update examples** in documentation

### When Refactoring

1. **Update cursor rules** with new patterns
2. **Remove old patterns** from rules
3. **Keep user guides** (if behavior unchanged)
4. **Update examples** if API changed

## Documentation Maintenance

### Regular Cleanup

Every major milestone:
1. Review root .md files for outdated info
2. Remove historical/temporary files
3. Consolidate duplicate information
4. Update roadmap status

### Keep Fresh

- Update examples when patterns change
- Remove obsolete information
- Keep CLI commands list current
- Update architecture diagrams if created

## Quick Reference

**Adding user-facing feature?** → Update README.md + relevant guide
**Adding dev pattern?** → Update relevant .mdc rule
**Changed architecture?** → Update ARCHITECTURE.md or local-architecture.mdc
**Milestone complete?** → Update local-architecture.mdc
**Need to remember something?** → Update existing .mdc, don't create new file
