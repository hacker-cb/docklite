---
alwaysApply: true
description: DockLite project structure and architecture overview
---

# DockLite Project Overview

DockLite - multi-tenant система управления веб-сервером для деплоя множества проектов через docker-compose с user isolation и role-based access control.

## Project Structure

```
/home/pavel/docklite/          # Main DockLite system
├── backend/                   # FastAPI backend
│   ├── app/
│   │   ├── api/              # API endpoints (auth, users, projects, containers, presets, deployment)
│   │   ├── core/             # Config, database, security
│   │   ├── models/           # SQLAlchemy models & Pydantic schemas
│   │   ├── services/         # Business logic (auth, project, docker)
│   │   ├── constants/        # Enums, messages
│   │   ├── exceptions/       # Custom exceptions
│   │   ├── utils/            # Formatters, responses, logger
│   │   ├── validators/       # Compose, domain validation
│   │   └── presets/          # 14 docker-compose templates
│   ├── tests/                # Pytest tests (157 tests)
│   ├── alembic/              # Database migrations (3 revisions)
│   └── Dockerfile
├── frontend/                  # Vue.js 3 + PrimeVue frontend
│   ├── src/
│   │   ├── components/       # Dialogs (CreateProject, EnvVars, DeployInfo)
│   │   ├── views/            # Router views (ProjectsView, UsersView)
│   │   ├── composables/      # Reusable logic (useProjects, useContainers, usePresets)
│   │   ├── config/           # Constants
│   │   ├── utils/            # Formatters, toast
│   │   ├── App.vue           # Main app with auth
│   │   ├── Login.vue         # Login form
│   │   ├── Setup.vue         # Initial setup form
│   │   ├── router.js         # Vue Router config
│   │   └── api.js            # Axios API client
│   ├── tests/                # Vitest tests (120+)
│   └── Dockerfile
├── scripts/                   # Production scripts (17 total)
│   ├── docklite.sh           # Main CLI wrapper
│   ├── lib/                  # Common functions
│   ├── development/          # Dev scripts (6)
│   ├── deployment/           # Setup scripts (3)
│   ├── maintenance/          # Maintenance (5)
│   └── completion/           # Bash completion (2)
└── docker-compose.yml

/home/{system_user}/projects/  # User deployed projects (multi-tenant)
    ├── {project-slug}/        # Slug-based path (e.g., example-com-a7b2)
    │   ├── docker-compose.yml
    │   └── .env
```

## Key Architecture Decisions

### Multi-Tenancy
- Each project belongs to a user (owner_id FK)
- Projects stored in `/home/{system_user}/projects/{slug}/`
- Slug-based paths (e.g., `example-com-a7b2`) instead of numeric IDs
- System-level isolation via Linux users
- Non-admin users see only their projects
- Admin users see all projects

### Deployment via SSH
- Each DockLite user maps to a Linux system_user
- Projects dir: `/home/{system_user}/projects/`
- Users upload files via rsync/scp/SFTP
- Docker operations execute as system_user

### Authentication & Authorization
- JWT authentication with bcrypt password hashing
- Role-based access control (admin vs user)
- Ownership checks on all operations
- Setup screen for first admin creation
- Password reset via CLI: `./docklite reset-password`

## Tech Stack

**Backend:**
- FastAPI (async)
- SQLAlchemy + Alembic (SQLite, migrateable to PostgreSQL)
- JWT (python-jose) + bcrypt (passlib)
- PyYAML for validation
- Pytest (78 tests, 94% coverage)

**Frontend:**
- Vue.js 3 (Composition API)
- Vue Router 4 (hash mode)
- PrimeVue UI components
- Axios for API calls
- Vitest for testing

## Current Phase Status

✅ **Phase 1-3**: Production Ready
- Multi-tenant architecture
- Container management (start/stop/restart)
- 270+ tests (95% coverage)
- Professional CLI (17 commands)
- Bash completion

🔄 **Phase 4**: Nginx & Virtual Hosts (next)
🔄 **Phases 5-9**: Planned

**See:** [phases-roadmap.mdc](mdc:phases-roadmap.mdc)

## Important Files

- [backend/app/main.py](mdc:backend/app/main.py) - FastAPI app entry point
- [backend/app/core/config.py](mdc:backend/app/core/config.py) - Settings
- [backend/app/models/project.py](mdc:backend/app/models/project.py) - Project model
- [backend/app/models/user.py](mdc:backend/app/models/user.py) - User model
- [frontend/src/App.vue](mdc:frontend/src/App.vue) - Main Vue app
- [frontend/src/router.js](mdc:frontend/src/router.js) - Vue Router
- [docker-compose.yml](mdc:docker-compose.yml) - DockLite orchestration
- [README.md](mdc:README.md) - Main documentation

## CLI Usage

**Main CLI:** `./docklite <command>`

### Essential Commands
```bash
./docklite start              # Start system
./docklite stop               # Stop system
./docklite status             # Check status
./docklite test               # Run all tests
./docklite reset-password     # Reset user password
./docklite backup             # Backup system
./docklite --help             # Show all commands
```

**Full docs:** [scripts/README.md](mdc:../scripts/README.md)

## Testing

Always run tests after changes:
```bash
./docklite test               # All tests (157 backend + 120+ frontend)
./docklite test-backend       # Backend only (157 tests)
./docklite test-frontend      # Frontend only (120+ tests)
```

Expected: All tests passing ✅
