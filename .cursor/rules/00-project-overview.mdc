---
alwaysApply: true
description: DockLite project structure and architecture overview
---

# DockLite Project Overview

DockLite - multi-tenant система управления веб-сервером для деплоя множества проектов через docker-compose с user isolation и role-based access control.

## 🚨 CRITICAL: Development Environment Setup

**REQUIRED FOR ALL NEW AGENTS/DEVELOPERS:**

Before making ANY changes to the codebase, you MUST run:

```bash
./docklite setup-dev
```

**Why this is critical:**
- ✅ Creates isolated `.venv/` virtual environment
- ✅ Installs all CLI dependencies (typer, rich, python-dotenv, PyYAML)
- ✅ Sets up `.env` configuration
- ✅ Validates Docker is running
- ✅ Ensures consistent development environment

**DO NOT:**
- ❌ Install packages globally (`pip3 install` without venv)
- ❌ Skip this step and assume dependencies are installed
- ❌ Use `--user` or `--break-system-packages` flags
- ❌ Start working without proper environment

**The `./docklite` CLI wrapper automatically uses `.venv/` - no manual activation needed!**

If you encounter `ModuleNotFoundError` for typer/rich/etc, you skipped this step.

## Project Structure

```
<PROJECT_ROOT>/                # DockLite system (paths auto-detected)
├── backend/                   # FastAPI backend
│   ├── app/
│   │   ├── api/              # API endpoints (auth, users, projects, containers, presets, deployment)
│   │   ├── core/             # Config, database, security
│   │   ├── models/           # SQLAlchemy models & Pydantic schemas
│   │   ├── services/         # Business logic (auth, project, docker, traefik)
│   │   ├── constants/        # Enums, messages
│   │   ├── exceptions/       # Custom exceptions
│   │   ├── utils/            # Formatters, responses, logger, hostname
│   │   ├── validators/       # Compose, domain validation
│   │   └── presets/          # 14 docker-compose templates (Traefik-ready)
│   ├── tests/                # Pytest tests (240 tests)
│   ├── alembic/              # Database migrations (3 revisions)
│   └── Dockerfile
├── frontend/                  # Vue.js 3 + PrimeVue frontend
│   ├── src/
│   │   ├── components/       # Dialogs (CreateProject, EnvVars, DeployInfo)
│   │   ├── views/            # Router views (ProjectsView, UsersView)
│   │   ├── composables/      # Reusable logic (useProjects, useContainers, usePresets)
│   │   ├── config/           # Constants
│   │   ├── utils/            # Formatters, toast
│   │   ├── App.vue           # Main app with auth
│   │   ├── Login.vue         # Login form
│   │   ├── Setup.vue         # Initial setup form
│   │   ├── router.js         # Vue Router config
│   │   └── api.js            # Axios API client
│   ├── tests/                # Vitest tests (120+)
│   └── Dockerfile
├── scripts/                   # Production scripts (19 total)
│   ├── docklite.sh           # Main CLI wrapper
│   ├── lib/                  # Common functions (hostname, utilities)
│   ├── development/          # Dev scripts (9: +test-e2e)
│   ├── deployment/           # Setup scripts (3)
│   ├── maintenance/          # Maintenance (7: list-users, reset-password)
│   └── completion/           # Bash completion (2)
└── docker-compose.yml

<PROJECTS_DIR>/                # User deployed projects (multi-tenant, configurable)
    ├── {project-slug}/        # Slug-based path (e.g., example-com-a7b2)
    │   ├── docker-compose.yml
    │   └── .env
```

**Note:** Paths auto-detect based on script location. Works on macOS and Linux.

## Key Architecture Decisions

### Multi-Tenancy
- Each project belongs to a user (owner_id FK)
- Projects stored in `/home/{system_user}/projects/{slug}/`
- Slug-based paths (e.g., `example-com-a7b2`) instead of numeric IDs
- System-level isolation via Linux users
- Non-admin users see only their projects
- Admin users see all projects

### Deployment via SSH
- Each DockLite user maps to a Linux system_user
- Projects dir: `/home/{system_user}/projects/`
- Users upload files via rsync/scp/SFTP
- Docker operations execute as system_user

### Authentication & Authorization
- JWT authentication with bcrypt password hashing
- Role-based access control (admin vs user)
- Ownership checks on all operations
- Setup screen for first admin creation
- Password reset via CLI: `./docklite reset-password`

## Tech Stack

**Backend:**
- FastAPI (async)
- SQLAlchemy + Alembic (SQLite, migrateable to PostgreSQL)
- JWT (python-jose) + bcrypt (passlib)
- PyYAML for validation
- Pytest (240 tests, 95% coverage)

**Frontend:**
- Vue.js 3 (Composition API)
- Vue Router 4 (hash mode)
- PrimeVue UI components
- Axios for API calls
- Vitest for testing

**Platform Support:**
- ✅ Development: macOS + Linux
- ✅ Production: Linux
- 🐳 Docker Desktop (macOS) or Docker Engine (Linux)

## Current Status

✅ **Production Ready**
- Multi-tenant architecture
- Container management with system protection
- Traefik v3 reverse proxy with domain routing
- Professional CLI with bash completion
- Comprehensive test coverage (95%)

## Current Features

**Core Functionality:**
- Multi-tenant project management
- Docker containers management with system protection
- Role-based access control (admin/user)
- Traefik v3 reverse proxy with domain routing
- Professional CLI (19 commands)
- 240 backend tests + 120+ frontend tests (95% coverage)

**Admin Features:**
- User management (create, list, reset passwords)
- System containers protection (backend, frontend, traefik)
- Traefik dashboard access (admin-only)
- All containers monitoring and control

## Important Files

**Core:**
- [backend/app/main.py](mdc:backend/app/main.py) - FastAPI app entry point
- [backend/app/core/config.py](mdc:backend/app/core/config.py) - Settings (HOSTNAME, TRAEFIK_DASHBOARD_HOST)
- [docker-compose.yml](mdc:docker-compose.yml) - DockLite orchestration with Traefik v3

**Models & Services:**
- [backend/app/models/project.py](mdc:backend/app/models/project.py) - Project model (slug-based)
- [backend/app/models/user.py](mdc:backend/app/models/user.py) - User model
- [backend/app/services/traefik_service.py](mdc:backend/app/services/traefik_service.py) - Traefik labels
- [backend/app/services/docker_service.py](mdc:backend/app/services/docker_service.py) - Docker CLI wrapper
- [backend/app/services/project_service.py](mdc:backend/app/services/project_service.py) - Project CRUD with Traefik

**Security & Utils:**
- [backend/app/core/security.py](mdc:backend/app/core/security.py) - JWT auth + cookie support
- [backend/app/utils/hostname.py](mdc:backend/app/utils/hostname.py) - Hostname detection
- [backend/app/api/auth.py](mdc:backend/app/api/auth.py) - Auth endpoints + verify-admin

**Frontend:**
- [frontend/src/App.vue](mdc:frontend/src/App.vue) - Main app with nav (Projects, Users, Containers, Traefik)
- [frontend/src/views/ContainersView.vue](mdc:frontend/src/views/ContainersView.vue) - Containers management
- [frontend/src/router.js](mdc:frontend/src/router.js) - Vue Router

**Scripts:**
- [scripts/lib/common.sh](mdc:scripts/lib/common.sh) - Hostname functions (get_hostname, get_access_url)
- [scripts/docklite.sh](mdc:scripts/docklite.sh) - CLI wrapper (19 commands)

**Documentation:**
- [README.md](mdc:README.md) - Main documentation
- [TRAEFIK.md](mdc:TRAEFIK.md) - Traefik guide
- [SYSTEM_CONTAINERS_PROTECTION.md](mdc:SYSTEM_CONTAINERS_PROTECTION.md) - System protection

## CLI Usage

**Main CLI:** `./docklite <command>` (19 commands)

### First Time Setup
```bash
# One command to setup development environment
./docklite setup-dev          # Creates venv, installs deps, creates .env
```

**What it does:**
- ✅ Creates `.venv/` virtual environment
- ✅ Installs CLI dependencies (typer, rich, python-dotenv, PyYAML)
- ✅ Creates `.env` from `.env.example`
- ✅ Checks Docker
- ✅ Makes CLI executable

**Important:** CLI automatically uses venv - no manual activation needed!

### Essential Commands
```bash
./docklite start              # Start system (with Traefik)
./docklite stop               # Stop system
./docklite status             # Check status + URLs
./docklite test               # Run all tests (240 backend + 120+ frontend)
./docklite add-user <name>    # Add new user (interactive or with -p flag)
./docklite list-users         # List all users
./docklite reset-password     # Reset user password
./docklite backup             # Backup system
./docklite --help             # Show all commands
```

**Full docs:** [scripts/README.md](mdc:scripts/README.md)

## Testing

Always run tests after changes:
```bash
./docklite test               # All tests (240 backend + 120+ frontend unit)
./docklite test-backend       # Backend only (240 tests)
./docklite test-frontend      # Frontend only (120+ tests)
./docklite test-e2e           # E2E tests (24 tests, requires Playwright)

# Specific test categories
./docklite test-backend -k traefik    # Traefik tests (18)
./docklite test-backend -k hostname   # Hostname tests (20)
./docklite test-backend -k security   # Security tests (34)
./docklite test-e2e --ui              # E2E interactive mode
bash scripts/lib/test_hostname.sh     # Bash hostname tests (6)

# Or via Docker Compose (works on all platforms)
docker compose exec backend pytest -v
docker compose exec frontend npm test
cd frontend && npm run test:e2e       # E2E tests
```

Expected: All tests passing ✅ (240 backend, 120+ frontend unit, 24 E2E)

**Note:** CLI commands use `.venv/` automatically - tests run in containers.

## CI/CD Pipeline

**Automated Testing:** GitHub Actions tests `setup-dev` on every push

**Workflow:** `.github/workflows/test-setup-dev.yml`

✅ **Tested Platforms:**
- Linux (Ubuntu Latest)
- macOS (Latest)
- Python 3.8, 3.9, 3.10, 3.11, 3.12

✅ **Validates:**
- Virtual environment creation
- Dependency installation
- CLI functionality
- Cross-platform compatibility
- System Python cleanliness

**Status:** ![Setup Dev](https://github.com/hacker-cb/docklite/actions/workflows/test-setup-dev.yml/badge.svg)

**Time:** ~30 seconds for complete validation

**Documentation:** [docs/CI_CD.md](mdc:docs/CI_CD.md)

## macOS Development

DockLite fully supports development on macOS. See [macos-compatibility.mdc](mdc:.cursor/rules/macos-compatibility.mdc) for details.

**Key differences:**
- ✅ All development features work
- ✅ Docker Desktop instead of Docker Engine
- ✅ venv works seamlessly (no --break-system-packages needed!)
- ⚠️ Deployment commands (setup-user, setup-ssh) are Linux-only
- ✅ Use `./docklite setup-dev` for automatic setup
