---
description: URL conventions, hostname detection system with priority logic
globs: ["scripts/**/*.sh", "scripts/**/*.py", "backend/app/utils/hostname.py", "backend/app/core/config.py"]
tags: ["python", "bash", "configuration", "traefik"]
alwaysApply: true
---

# DockLite Access URLs & Hostname System

## Production URLs

**Hostname:** `example.com` (configured in `.env`)

- **Frontend:** http://example.com
- **Backend API:** http://example.com/api
- **API Docs:** http://example.com/docs
- **Traefik:** http://example.com/traefik/ (admin-only)
- **Containers:** http://example.com/containers (admin-only)

## URL Conventions

**IMPORTANT:** Use `/traefik/` for Traefik Dashboard (not `/dashboard/`)

### Path Conventions

- `/traefik/` - Traefik reverse proxy dashboard
- `/containers` - DockLite containers management
- Clear separation between Traefik (infrastructure) and DockLite (application)

### Internal vs External URLs

- **External (user-facing):** `/traefik/`
- **Internal (Traefik expects):** `/dashboard/`
- **Conversion:** Done via `traefik-stripprefix` middleware in docker-compose.yml

## Hostname Detection System

Unified hostname detection across Python and Bash with same priority logic.

### Priority Chain

```
1. HOSTNAME in .env (explicit config) ← Highest priority
2. System hostname (socket.gethostname() / hostname command)
3. Fallback parameter (e.g., HTTP Host header)
4. "localhost" (default)
```

### Validation Rules

**Valid hostnames:**
- example.com
- subdomain.example.com
- your.domain.com

**Invalid (skipped to next priority):**
- localhost (too generic)
- 192.168.1.1 (raw IP address)
- (empty string)

## Configuration

### Priority 1: Config (Recommended for Production)

```bash
# .env
HOSTNAME=docklite.example.com
TRAEFIK_DASHBOARD_HOST=docklite.example.com
```

### Priority 2: System Hostname

```bash
sudo hostnamectl set-hostname your.domain.com
# Auto-detected by hostname functions
```

### Priority 3: Auto-detect (Default)

No config needed - falls back to localhost

## Dynamic URL Generation

**ALWAYS use hostname functions, NEVER hardcode URLs:**

### Python Backend

```python
from app.utils.hostname import get_server_hostname, get_access_url

# Get hostname
hostname = get_server_hostname(fallback="localhost")
# Returns: config value OR system hostname OR fallback OR "localhost"

# Build URLs
frontend_url = get_access_url()
# http://example.com

api_url = get_access_url(path="/api")
# http://example.com/api

dashboard_url = get_access_url(path="/traefik", port=None)
# http://example.com/traefik

custom_port = get_access_url(path="", port=8888)
# http://example.com:8888
```

**Location:** `backend/app/utils/hostname.py`

### Python CLI

```python
from cli.utils.hostname import get_hostname, get_access_url

# Get URLs
get_access_url()              # http://example.com
get_access_url('/api')        # http://example.com/api
get_access_url('/traefik')    # http://example.com/traefik
```

**Location:** `scripts/cli/utils/hostname.py`

### Bash Scripts

```bash
# Load hostname functions
source "$SCRIPT_DIR/lib/common.sh"

# Get hostname
hostname=$(get_hostname)

# Build URLs
frontend=$(get_access_url)                    # http://example.com
api=$(get_access_url "/api")                  # http://example.com/api
traefik=$(get_access_url "/traefik")          # http://example.com/traefik
custom=$(get_access_url "" "8888")            # http://example.com:8888
https=$(get_access_url "/secure" "" "https")  # https://example.com/secure
```

**Location:** `scripts/lib/common.sh`

### URL Features

- Automatically hides default ports (80, 443)
- Adds leading slash to paths if missing
- Supports http/https protocols
- Consistent Python + Bash behavior

## CLI Output Examples

### Start/Rebuild/Status Commands

```
Frontend:  http://example.com
Backend:   http://example.com/api
API Docs:  http://example.com/docs
Traefik:   http://example.com/traefik (admin only)
```

## Best Practices

### ✅ ALWAYS in Scripts

Use hostname functions:
```bash
log_info "Frontend: $(get_access_url)"
log_info "API: $(get_access_url "/api")"
log_info "Traefik: $(get_access_url "/traefik")"
```

### ❌ NEVER hardcode

```bash
log_info "Frontend: http://localhost:5173"  # Wrong!
log_info "API: http://localhost:8000"       # Wrong!
```

```python
# Hardcoded URL
url = "http://localhost/dashboard"  # Wrong!

# Hardcoded hostname
base_url = "http://example.com"  # Wrong!
```

### ✅ DO instead

```python
# Dynamic URL generation
url = get_access_url("/traefik")

# Correct path
window.open('/traefik/', '_blank')

# Dynamic hostname
base_url = get_access_url()
```

## Testing

**Python tests:** `backend/tests/test_utils/test_hostname.py`
**Bash tests:** `scripts/lib/test_hostname.sh`

All priority levels tested and validated.

## Test User Credentials

For testing and automation:

- **Username:** `cursor`
- **Password:** `CursorAI_Test2024!`
- **Role:** Admin
- **Create:** `./docklite add-user cursor -p "CursorAI_Test2024!" --admin`
