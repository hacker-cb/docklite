---
globs: backend/tests/**/*.py,frontend/tests/**/*.js
description: Testing patterns and requirements
---

# Testing Guidelines

## Backend Tests (pytest)

Location: `backend/tests/`

### Structure
```
tests/
├── conftest.py           # Fixtures
├── test_api/            # API integration tests
│   ├── test_auth.py     # Auth endpoints
│   ├── test_users.py    # User management
│   ├── test_projects.py # Projects CRUD
│   ├── test_env.py      # Environment variables
│   ├── test_presets.py  # Presets
│   └── test_protected.py # Auth protection
└── test_services/       # Service unit tests
    ├── test_auth_service.py
    └── test_validation.py
```

### Required Fixtures

From [backend/tests/conftest.py](mdc:backend/tests/conftest.py):

- `client` - AsyncClient for API tests
- `db_session` - Fresh DB session (in-memory SQLite)
- `auth_token` - Valid JWT token for protected endpoints
- `temp_projects_dir` - Temporary directory for file operations
- `sample_project_data` - Valid project data
- `sample_compose_content` - Valid docker-compose.yml

### Auth Token Pattern

ALL tests for protected endpoints must use `auth_token` fixture:

```python
async def test_protected_endpoint(client: AsyncClient, auth_token):
    response = await client.get(
        "/api/projects",
        headers={"Authorization": f"Bearer {auth_token}"}
    )
    assert response.status_code == 200
```

### Running Tests

```bash
# All tests
sg docker -c "docker-compose run --rm backend pytest -v"

# With coverage
sg docker -c "docker-compose run --rm backend pytest --cov=app"

# Specific file
sg docker -c "docker-compose run --rm backend pytest tests/test_api/test_auth.py -v"
```

Expected: **78 tests passing**

## Frontend Tests (Vitest)

Location: `frontend/tests/`

### Structure
```
tests/
├── components/                # Component tests
│   ├── CreateProjectDialog.spec.js
│   ├── EnvVarsDialog.spec.js
│   ├── DeployInfoDialog.spec.js
│   ├── Login.spec.js
│   └── Setup.spec.js
├── views/                     # View tests
│   ├── ProjectsView.spec.js
│   └── UsersView.spec.js
├── composables/               # Composable tests
│   ├── useProjects.spec.js
│   ├── useContainers.spec.js
│   └── usePresets.spec.js
├── utils/                     # Utility tests
│   ├── formatters.spec.js
│   └── toast.spec.js
├── router.spec.js             # Router tests
└── setup.js                   # Test setup
```

### Setup

- Use happy-dom environment
- Mock API calls with vi.mock
- Test components, composables, utils, router
- **Total: 120+ tests**

### Running Tests

**Locally (recommended for development):**
```bash
cd /home/pavel/docklite/frontend
npm install
npm test          # Run all tests
npm test -- --run # Run once without watch
npm run test:coverage # With coverage report
```

**Note:** Frontend Docker container is for production build only and doesn't include npm/vitest.
To run tests, you need Node.js installed locally or use a dev Docker container.

## Critical Test Coverage

Must test:
- ✅ Authentication (setup, login, logout, JWT)
- ✅ Protected endpoints require auth
- ✅ CRUD operations
- ✅ Validation (compose, passwords, domains)
- ✅ Admin-only endpoints
- ✅ Error cases (404, 400, 403, 401)

## ⚠️ IMPORTANT: Always Run Tests After Changes

**MANDATORY:** After ANY code changes (new features, refactoring, bug fixes), you MUST:

1. **All tests:**
   ```bash
   ./docklite test
   ```
   Expected: 157 backend + 120+ frontend tests passing

2. **Backend only** (if only backend changed):
   ```bash
   ./docklite test-backend
   ```
   Expected: 157 tests passing

3. **Frontend only** (if only frontend changed):
   ```bash
   ./docklite test-frontend
   ```
   Expected: 120+ tests passing

4. **Fix any failing tests** before proceeding

This ensures no regressions and maintains code quality.

**Note:** You can also use direct docker-compose commands if needed:
```bash
sg docker -c "docker-compose run --rm backend pytest -v"
```
