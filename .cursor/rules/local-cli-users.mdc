---
description: User management CLI commands (add, list, reset-password)
globs: ["scripts/maintenance/add-user.sh", "scripts/maintenance/list-users.sh", "scripts/maintenance/reset-password.sh", "backend/app/cli_helpers/*.py", "scripts/cli/commands/user.py"]
tags: ["cli", "bash", "python", "user-management"]
---

# User Management CLI Commands

## Add User Command

**Usage:**
```bash
./docklite add-user <username> [options]

Options:
  -p, --password    Password (interactive if not provided)
  -a, --admin       Create as admin user
  -e, --email       Email address (optional)
  -s, --system      System user for deployment (default: docklite)

Examples:
  ./docklite add-user john                      # Interactive mode
  ./docklite add-user john -p Pass123 --admin   # Admin with password
  ./docklite add-user john -e john@example.com  # With email
```

## List Users

```bash
./docklite list-users           # Simple list
./docklite list-users --verbose # Detailed info
```

Shows all users with roles (admin/user) and status (active/inactive).

## Password Management

### Reset Password via CLI

**Command:** `./docklite reset-password <username> [options]`

### Usage

**Interactive (recommended):**
```bash
./docklite reset-password admin
# Prompts for password securely
# Confirms password
# Validates length (min 6 chars)
```

**With password argument:**
```bash
./docklite reset-password admin -p newpassword
```

**For any user:**
```bash
./docklite reset-password username
```

### How It Works

1. **Checks backend is running** - starts if needed
2. **Executes Python script** inside backend container
3. **Uses raw SQL** to avoid circular import issues
4. **Hashes password** with bcrypt via passlib
5. **Updates database** directly
6. **Shows user info** - confirms success

### Security

✅ Password validated (min 6 characters)
✅ Bcrypt hashing (cost factor 12)
✅ No password in logs (when interactive)
✅ Direct database update (no API)
✅ Works even if locked out

### Password Requirements

**Minimum:** 6 characters
**Hashing:** Bcrypt via passlib
**Storage:** password_hash in users table

### Implementation

#### CLI Reset Script

Uses raw SQL to avoid model imports:

```python
# Find user
result = await db.execute(
    text("SELECT id, username, email, is_admin, is_active FROM users WHERE username = :username"),
    {"username": username}
)
user_row = result.fetchone()

# Hash password
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
password_hash = pwd_context.hash(new_password)

# Update
await db.execute(
    text("UPDATE users SET password_hash = :hash WHERE username = :username"),
    {"hash": password_hash, "username": username}
)
```

**Why raw SQL?** Avoids circular import between User and Project models when loading relationships.

**Location:** `backend/app/cli_helpers/reset_password.py`

#### Password Hashing Service

**Location:** `backend/app/services/auth_service.py`

```python
class AuthService:
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    
    def get_password_hash(self, password: str) -> str:
        return self.pwd_context.hash(password)
    
    def verify_password(self, plain: str, hashed: str) -> bool:
        return self.pwd_context.verify(plain, hashed)
```

## Common Scenarios

### Forgot Admin Password

```bash
./docklite reset-password admin
# Enter new password when prompted
```

### Locked Out

```bash
# Even if can't login to UI, can reset via CLI
./docklite reset-password admin -p temporarypass
# Login to UI
# Change to secure password via UI
```

### Reset Multiple Users

```bash
./docklite reset-password user1 -p pass1
./docklite reset-password user2 -p pass2
./docklite reset-password user3 -p pass3
```

### Check User Exists

Script shows user info after reset:
```
SUCCESS: Password reset for user 'admin'
User ID: 1
Email: admin@example.com
Admin: Yes
Active: Yes
```

## Test User Convention

For testing and AI assistant access:

**Username:** `cursor`
**Password:** Use complex password (e.g., `CursorAI_Test2024!`)
**Role:** Admin
**Purpose:** Testing, browser automation, demonstrations

### Creating Test User

```bash
./docklite add-user cursor -p "CursorAI_Test2024!" --admin
```

Or directly inside backend container:

```bash
docker compose exec -T backend python -c "
import asyncio
from app.core.database import AsyncSessionLocal
from passlib.context import CryptContext
from sqlalchemy import text

pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')

async def create_user():
    async with AsyncSessionLocal() as db:
        password_hash = pwd_context.hash('CursorAI_Test2024!')
        await db.execute(
            text('''
                INSERT INTO users (username, password_hash, email, is_admin, is_active, system_user)
                VALUES (:username, :password_hash, :email, :is_admin, 1, :system_user)
            '''),
            {
                'username': 'cursor',
                'password_hash': password_hash,
                'email': 'cursor@example.com',
                'is_admin': 1,
                'system_user': 'docklite'
            }
        )
        await db.commit()
        print('User created')

asyncio.run(create_user())
"
```

## User Management API

**Endpoint:** `POST /api/users` (admin-only)

**Schema:** `backend/app/models/schemas.py`

```python
class UserCreate(UserBase):
    username: str = Field(..., min_length=3, max_length=255)
    email: Optional[EmailStr] = None
    system_user: str = Field(default="docklite", min_length=1, max_length=255)
    password: str = Field(..., min_length=6)
```

**Service:** `backend/app/services/auth_service.py`

```python
async def create_user(self, user_data: UserCreate) -> Tuple[Optional[User], Optional[str]]:
    # Check if user exists
    existing_user = await self.get_user_by_username(user_data.username)
    if existing_user:
        return None, ErrorMessages.USERNAME_EXISTS
    
    # Hash password
    password_hash = self.get_password_hash(user_data.password)
    
    # Create user
    new_user = User(
        username=user_data.username,
        email=user_data.email,
        password_hash=password_hash,
        system_user=user_data.system_user,
        is_active=1,
        is_admin=0
    )
    
    self.db.add(new_user)
    await self.db.flush()
    await self.db.commit()
    
    return new_user, None
```

## Security Considerations

1. **Password Requirements:**
   - Minimum 6 characters
   - Use complex passwords for production
   - Interactive mode hides password input

2. **Admin Access:**
   - Only admins can create users via API
   - CLI commands use direct database access
   - First user created via setup screen

3. **System User:**
   - Default: `docklite`
   - Must exist as Linux user for SSH deployment
   - Controls project ownership in `/home/{system_user}/projects/`

## Troubleshooting

### User not found

```bash
# List all users first
./docklite list-users
```

### Backend not running

```bash
# Start backend first
./docklite start
# Then reset password
./docklite reset-password admin
```

### Circular import errors

Script uses raw SQL to avoid this. If you see import errors, ensure script uses `text()` for queries, not ORM models.

## Testing Workflow

When testing with browser automation:

1. Create cursor user: `./docklite add-user cursor -p "CursorAI_Test2024!" --admin`
2. Use for login in automated tests
3. Clean up after testing (optional): Remove via database or recreate
4. Never commit test user credentials to version control
