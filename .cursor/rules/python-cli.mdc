---
description: Python CLI architecture with Typer, Rich, and hybrid approach
globs: scripts/**/*.py,backend/app/cli_helpers/*.py
---

# Python CLI System

## üö® FIRST STEP: Setup Development Environment

**MANDATORY BEFORE ANY WORK:**

```bash
./docklite setup-dev
```

This creates `.venv/` and installs all dependencies. Skip this and CLI will fail.

---

## Architecture (Hybrid Approach)

**CLI Location:** [scripts/cli/](mdc:scripts/cli/)  
**DB Helpers:** [backend/app/cli_helpers/](mdc:backend/app/cli_helpers/)

### Why Hybrid?

‚úÖ **CLI in scripts/** - Independent, no backend dependencies  
‚úÖ **Helpers in backend/** - Direct database access, use SQLAlchemy models  
‚úÖ **Best of both worlds** - System commands + DB operations

## Structure

```
scripts/
‚îú‚îÄ‚îÄ docklite                    # Entry point (Python executable)
‚îú‚îÄ‚îÄ cli/
‚îÇ   ‚îú‚îÄ‚îÄ main.py                # Typer app with all commands
‚îÇ   ‚îú‚îÄ‚îÄ config.py              # get_hostname(), get_access_url(), paths
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ console.py         # Rich logging (log_info, log_success, etc)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docker.py          # docker_compose_cmd, is_container_running
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ system.py          # User management, file operations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.py      # check_docker, check_docker_compose
‚îÇ   ‚îî‚îÄ‚îÄ commands/
‚îÇ       ‚îú‚îÄ‚îÄ development.py     # start, stop, test, logs
‚îÇ       ‚îú‚îÄ‚îÄ deployment.py      # setup-user, setup-ssh, init-db
‚îÇ       ‚îî‚îÄ‚îÄ maintenance.py     # backup, status, list-users, reset-password
‚îî‚îÄ‚îÄ tests/                      # 60 pytest tests

backend/app/cli_helpers/
‚îú‚îÄ‚îÄ list_users.py              # Database user queries
‚îî‚îÄ‚îÄ reset_password.py          # Password reset operations
```

## Key Technologies

**Framework:** [Typer](https://typer.tiangolo.com/) - Modern CLI with auto-completion  
**UI:** [Rich](https://rich.readthedocs.io/) - Beautiful terminal output  
**Environment:** Virtual environment (.venv/) - isolated dependencies  
**Testing:** pytest with 60 tests

## Virtual Environment (venv)

**Location:** `.venv/` in project root  
**Auto-activation:** `./docklite` wrapper automatically uses `.venv/bin/python`  
**Setup:** `./docklite setup-dev` creates and configures venv

### Key Features

‚úÖ **No manual activation** - wrapper handles it automatically  
‚úÖ **Isolated dependencies** - no system Python pollution  
‚úÖ **Cross-platform** - works on macOS, Linux, Windows  
‚úÖ **One-command setup** - `./docklite setup-dev`

### Dependencies (in venv)

```
typer[all]>=0.12.0      # CLI framework with completion
rich>=13.7.0            # Beautiful terminal output
python-dotenv>=1.0.0    # .env file support
PyYAML>=6.0             # docker-compose.yml parsing
```

### How It Works

```python
# In ./docklite wrapper (scripts/docklite)

# Special case: setup-dev runs without dependencies
if command == 'setup-dev':
    # Built-in implementation using only stdlib
    # Creates venv, installs deps, no typer/rich needed
    subprocess.run([sys.executable, '-m', 'venv', '.venv'])
    subprocess.run(['.venv/bin/pip', 'install', '-r', 'requirements.txt'])
    sys.exit(0)

# For all other commands: auto-activate venv
if not in_venv and venv_exists:
    # Re-execute with venv python
    os.execv('.venv/bin/python', ['python'] + sys.argv)
```

**Key innovation:** `setup-dev` is built into the wrapper and works without ANY pre-installed dependencies. This solves the "chicken-and-egg" problem in CI/CD.

Users just run `./docklite <command>` - venv activation is transparent!

## Commands (19 total)

**Setup (1):**
- `setup-dev` - Setup development environment (creates venv, installs deps, creates .env)

**Development (8):**
- `start [--build] [--follow]` - Start services
- `stop [--volumes]` - Stop services
- `restart [--build]` - Restart (no logs)
- `rebuild [--no-cache] [--follow]` - Rebuild images
- `logs [service]` - Show logs
- `test [--verbose] [--quiet]` - All tests
- `test-backend` - Backend tests
- `test-frontend` - Frontend tests

**Deployment (3):**
- `setup-user [--user] [--dir]` - Create system user
- `setup-ssh [--user]` - Configure SSH
- `init-db [--reset]` - Initialize database

**Maintenance (7):**
- `add-user <username> [--password] [--admin] [--email]` - Add new user
- `backup [--output]` - Backup to tar.gz
- `restore <file>` - Restore from backup
- `clean [--all|--images|--volumes|--logs]` - Cleanup
- `status [--verbose]` - System status with Rich table
- `list-users [--verbose]` - List users (Rich table in verbose)
- `reset-password <username> [--password]` - Reset password

## Code Patterns

### Creating New Commands

```python
# In scripts/cli/commands/development.py (or other)
from typer import Typer
from ..utils.console import log_info, log_success, print_banner
from ..utils.docker import docker_compose_cmd
from ..config import PROJECT_ROOT

app = Typer(help="Category description")

@app.command()
def my_command(
    flag: bool = typer.Option(False, "--flag", "-f", help="Description")
):
    """Command description for help."""
    print_banner("Command Title")
    
    log_step("Doing something...")
    # Your logic here
    log_success("Done!")
```

### Using Backend Helpers

```python
# CLI command that needs database access
result = docker_compose_cmd(
    "exec", "-T", "backend",
    "python", "-m", "app.cli_helpers.list_users", "simple",
    cwd=PROJECT_ROOT,
    capture_output=True
)

# Parse output
output = result.stdout.strip()
```

### Backend Helper Pattern

```python
# backend/app/cli_helpers/my_helper.py
import asyncio
import sys
import logging

# Disable SQLAlchemy logging
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)

from app.core.database import AsyncSessionLocal
from app.models import user, project  # Import all models!
from app.models.user import User

async def my_operation():
    async with AsyncSessionLocal() as session:
        # Database operations
        pass

if __name__ == "__main__":
    command = sys.argv[1] if len(sys.argv) > 1 else "default"
    asyncio.run(my_operation())
```

## Console Utilities

**From [scripts/cli/utils/console.py](mdc:scripts/cli/utils/console.py):**

```python
log_info("Information")      # ‚Ñπ Blue
log_success("Success!")       # ‚úÖ Green  
log_error("Error!")          # ‚ùå Red
log_warning("Warning")       # ‚ö†Ô∏è Yellow
log_step("Step 1...")        # ‚ñ∂ Cyan

print_banner("Title")        # Rich Panel

table = create_table("Title")
table.add_column("Name")
# Add rows...

progress = create_progress()
with progress:
    task = progress.add_task("Processing...", total=100)
```

## Docker Operations

**From [scripts/cli/utils/docker.py](mdc:scripts/cli/utils/docker.py):**

```python
# Execute docker-compose
docker_compose_cmd("up", "-d", cwd=PROJECT_ROOT)

# Check container
if is_container_running("docklite-backend"):
    # Container is running
    pass

# Get all status
status = get_container_status()
# Returns: {"traefik": True, "backend": True, "frontend": False}
```

## Configuration

**From [scripts/cli/config.py](mdc:scripts/cli/config.py):**

```python
from cli.config import (
    VERSION,              # "1.0.0"
    PROJECT_ROOT,         # Path("~/docklite") - auto-detected
    BACKUPS_DIR,
    get_hostname,         # Priority: .env > system > localhost
    get_access_url        # Build URLs with hostname
)

# Always use get_access_url for URLs
url = get_access_url("/api")  # http://example.com/api
```

## Testing

**Run tests:**
```bash
cd scripts
python3 -m pytest tests/ -v          # Verbose
python3 -m pytest tests/ -q          # Quiet
python3 -m pytest tests/test_config.py -v  # Specific file
```

**Test structure:**
```python
# scripts/tests/test_my_feature.py
import pytest
from unittest.mock import Mock, patch

def test_something():
    """Test description."""
    # Arrange
    mock = Mock(return_value=True)
    
    # Act
    with patch('module.function', mock):
        result = function_to_test()
    
    # Assert
    assert result == expected
```

## Critical Rules

### ‚úÖ DO

- **Use venv** - all CLI dependencies must be in `.venv/`
- **Use Typer** for all CLI commands
- **Use Rich** for beautiful output (tables, panels, colors)
- **Call backend helpers** for database operations (not inline SQL)
- **Import all models** in helpers to avoid circular imports
- **Disable SQL logging** in helpers (`logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)`)
- **Use get_access_url()** for all URLs (never hardcode!)
- **Write tests** for new commands (follow existing patterns)
- **Use type hints** everywhere
- **Handle errors** gracefully with try/except
- **Test venv activation** - ensure `./docklite` uses `.venv/bin/python`

### ‚ùå DON'T

- **Never install globally** - always use venv (`.venv/`)
- **Never hardcode** URLs (localhost:8000, etc) - use `get_access_url()`
- **Never pass long Python scripts** as command args - use backend helpers
- **Never import only one model** - always `from app.models import user, project`
- **Don't call functions directly** in restart/rebuild - use explicit logic
- **Don't forget follow=False** when calling start() from other commands
- **Don't use print()** - use Rich console functions
- **Don't skip error handling**
- **Don't use --user or --break-system-packages** - venv makes them unnecessary

## Examples

### Status Command (Perfect Example)

See [scripts/cli/commands/maintenance.py](mdc:scripts/cli/commands/maintenance.py) `status()` function:
- ‚úÖ Rich table output
- ‚úÖ Colored status indicators
- ‚úÖ Uses get_access_url()
- ‚úÖ Handles all containers
- ‚úÖ Verbose mode

### List Users (Backend Helper Example)

See [backend/app/cli_helpers/list_users.py](mdc:backend/app/cli_helpers/list_users.py):
- ‚úÖ Imports all models
- ‚úÖ Disables SQL logging
- ‚úÖ Multiple output formats (simple/detailed/count)
- ‚úÖ CLI-friendly output format

## Installation

**First Time Setup:**
```bash
# One command - creates venv and installs everything
./docklite setup-dev
```

**What it does:**
- Creates `.venv/` virtual environment
- Installs CLI dependencies (typer, rich, python-dotenv, PyYAML)
- Creates `.env` from `.env.example`
- Checks Docker
- Makes CLI executable

**Manual Setup (if needed):**
```bash
# Create venv
python3 -m venv .venv

# Install dependencies
.venv/bin/pip install -r scripts/requirements.txt

# Create .env
cp .env.example .env
```

**Usage:**
```bash
# No activation needed - wrapper handles it!
./docklite --help
./docklite start
./docklite status
```

## Migration Notes

**Old:** Bash scripts (~2000 lines), system-wide pip installs  
**New:** Python CLI (~900 lines) + venv + 2 helpers + 60 tests  
**Improvement:** 55% less code, 100% tested, beautiful UX, isolated deps

**Status:** ‚úÖ Production ready, all 60 tests passing, venv-based

## Common Issues

**Issue:** Long Python script fails in docker exec  
**Solution:** Create helper in `backend/app/cli_helpers/`

**Issue:** Circular import errors  
**Solution:** Import ALL models: `from app.models import user, project`

**Issue:** SQL logs cluttering output  
**Solution:** `logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)`

**Issue:** Command hangs on logs  
**Solution:** Pass `follow=False` when calling `start()` from other commands
