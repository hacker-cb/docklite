---
description: Password management and reset procedures
---

# Password Management in DockLite

## Reset Password via CLI

**Command:** `./docklite reset-password <username> [options]`

**Script:** [scripts/maintenance/reset-password.sh](mdc:scripts/maintenance/reset-password.sh)

### Usage

**Interactive (recommended):**
```bash
./docklite reset-password admin
# Prompts for password securely
# Confirms password
# Validates length (min 6 chars)
```

**With password argument:**
```bash
./docklite reset-password admin -p newpassword
```

**For any user:**
```bash
./docklite reset-password username
```

### How It Works

1. **Checks backend is running** - starts if needed
2. **Executes Python script** inside backend container
3. **Uses raw SQL** to avoid circular import issues with User/Project relationships
4. **Hashes password** with bcrypt via passlib
5. **Updates database** directly
6. **Shows user info** - confirms success

### Security

✅ Password validated (min 6 characters)  
✅ Bcrypt hashing (cost factor 12)  
✅ No password in logs (when interactive)  
✅ Direct database update (no API)  
✅ Works even if locked out  

## Password Requirements

**Minimum:** 6 characters  
**Hashing:** Bcrypt via passlib  
**Storage:** password_hash in users table  

## Password Change in UI

Users can change their own password in Users page:
1. Admin login required
2. Navigate to Users
3. Click user row
4. Change Password button
5. Enter new password

**API:** `POST /api/users/{id}/password`  
**Endpoint:** [backend/app/api/users.py](mdc:backend/app/api/users.py)

## Implementation

### CLI Reset Script

Uses raw SQL to avoid model imports:

```python
# Find user
result = await db.execute(
    text("SELECT id, username, email, is_admin, is_active FROM users WHERE username = :username"),
    {"username": username}
)
user_row = result.fetchone()

# Hash password
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
password_hash = pwd_context.hash(new_password)

# Update
await db.execute(
    text("UPDATE users SET password_hash = :hash WHERE username = :username"),
    {"hash": password_hash, "username": username}
)
```

**Why raw SQL?** Avoids circular import between User and Project models when loading relationships.

### Password Hashing Service

**Location:** [backend/app/services/auth_service.py](mdc:backend/app/services/auth_service.py)

```python
class AuthService:
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    
    def get_password_hash(self, password: str) -> str:
        return self.pwd_context.hash(password)
    
    def verify_password(self, plain: str, hashed: str) -> bool:
        return self.pwd_context.verify(plain, hashed)
```

## Common Scenarios

### Forgot Admin Password

```bash
./docklite reset-password admin
# Enter new password when prompted
```

### Locked Out

```bash
# Even if can't login to UI, can reset via CLI
./docklite reset-password admin -p temporarypass
# Login to UI
# Change to secure password via UI
```

### Reset Multiple Users

```bash
./docklite reset-password user1 -p pass1
./docklite reset-password user2 -p pass2
./docklite reset-password user3 -p pass3
```

### Check User Exists

Script shows user info after reset:
```
SUCCESS: Password reset for user 'admin'
User ID: 1
Email: admin@example.com
Admin: Yes
Active: Yes
```

## Troubleshooting

### User not found
```bash
# List all users first
sg docker -c "docker-compose exec -T backend python3 -c '
import asyncio
from app.core.database import AsyncSessionLocal
from sqlalchemy import text

async def list_users():
    async with AsyncSessionLocal() as db:
        result = await db.execute(text(\"SELECT username FROM users\"))
        for row in result:
            print(row[0])

asyncio.run(list_users())
'"
```

### Backend not running
```bash
# Start backend first
./docklite start
# Then reset password
./docklite reset-password admin
```

### Circular import errors
Script uses raw SQL to avoid this. If you see import errors, ensure script uses `text()` for queries, not ORM models.

## Password Policy

**Current:**
- Minimum: 6 characters
- No complexity requirements
- No expiration

**Future enhancements:**
- Password complexity rules
- Password history
- Expiration policy
- 2FA support

## Related Files

- [scripts/maintenance/reset-password.sh](mdc:scripts/maintenance/reset-password.sh) - CLI script
- [backend/app/services/auth_service.py](mdc:backend/app/services/auth_service.py) - Password hashing
- [backend/app/api/users.py](mdc:backend/app/api/users.py) - Password change API
- [frontend/src/views/UsersView.vue](mdc:frontend/src/views/UsersView.vue) - UI for password change
