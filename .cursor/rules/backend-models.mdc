---
description: Database models and services patterns
globs: ["backend/app/models/*.py", "backend/app/services/*.py"]
tags: ["python", "sqlalchemy", "backend"]
---

# Backend Models & Services

## SQLAlchemy Models

Location: `backend/app/models/`

### Project Model

```python
class Project(Base):
    __tablename__ = "projects"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    domain = Column(String(255), unique=True, nullable=False, index=True)
    port = Column(Integer, nullable=True)  # NOT USED - kept for compatibility
    compose_content = Column(Text, nullable=False)
    env_vars = Column(Text, nullable=True, default="{}")  # JSON string
    status = Column(String(50), default="created")
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
```

**IMPORTANT:** Port field exists in DB but is NOT used. All projects use virtual hosts.

### User Model

```python
class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(255), unique=True, nullable=False, index=True)
    email = Column(String(255), unique=True, nullable=True, index=True)
    password_hash = Column(String(255), nullable=False)
    is_active = Column(Integer, default=1)  # SQLite uses 0/1 for boolean
    is_admin = Column(Integer, default=0)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
```

## Services Pattern

Services contain business logic. Use dependency injection:

```python
class ProjectService:
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def create_project(self, project_data: ProjectCreate):
        # Validate
        # Create in DB
        # Create files
        return project, error
```

**Always:**
- Return tuple: `(result, error)` or `(success, error)`
- Use `await self.db.flush()` before file operations to get ID
- Use `await self.db.commit()` to persist
- Use `await self.db.refresh(obj)` after commit

## Pydantic Schemas

Location: `backend/app/models/schemas.py`

- `ProjectBase` - base fields
- `ProjectCreate` - for POST requests
- `ProjectUpdate` - for PUT requests (all fields Optional)
- `ProjectResponse` - for responses

**Empty email handling:**
UserBase has `model_validate` to convert empty string to None.

## Database Migrations

Use Alembic. All models must be imported in [backend/alembic/env.py](mdc:backend/alembic/env.py):

```python
from app.models.project import Project
from app.models.user import User
```
