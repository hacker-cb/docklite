---
description: Frontend Vue.js patterns and conventions
globs: ["frontend/src/**/*.vue", "frontend/src/**/*.js"]
tags: ["vue", "javascript", "frontend"]
---

# Frontend Vue.js Conventions

## Architecture Overview

DockLite frontend follows Vue 3 Composition API best practices:

```
src/
├── components/     # Reusable UI components
├── views/          # Route-level components
├── composables/    # Reusable stateful logic
├── config/         # Constants & configuration
├── utils/          # Pure utility functions
├── router.js       # Vue Router
└── api.js          # Axios client
```

## Composables Pattern

**Purpose:** Extract and reuse stateful logic

**Naming:** Always use `use` prefix (e.g., `useProjects`, `useContainers`)

**Example:**
```javascript
// composables/useProjects.js
export function useProjects() {
  const projects = ref([])
  const loading = ref(false)
  
  const loadProjects = async () => { ... }
  
  return { projects, loading, loadProjects }
}

// In component
const { projects, loading, loadProjects } = useProjects()
```

**Available Composables:**
- `useProjects()` - Project CRUD operations
- `useContainers()` - Container management
- `usePresets()` - Preset selection logic

## Constants & Configuration

Location: `frontend/src/config/constants.js`

All magic values are extracted to constants:

```javascript
import { STATUS_SEVERITY, SUCCESS_MESSAGES } from '@/config/constants'

const severity = STATUS_SEVERITY[project.status]
showSuccess(toast, SUCCESS_MESSAGES.PROJECT_CREATED)
```

## Utils Pattern

Location: `frontend/src/utils/`

Pure utility functions for common operations:

```javascript
// formatters.js
import { formatDate, formatError } from '@/utils/formatters'

// toast.js
import { showSuccess, showError } from '@/utils/toast'
showSuccess(toast, 'Operation successful!')
showError(toast, error)
```

## Vue Router Structure

Location: `frontend/src/router.js`

- Uses `createWebHistory()` - Clean URLs like `/projects`, `/users`
- Lazy loading views: `component: () => import('./views/ProjectsView.vue')`
- Navigation guard for admin routes

## API Client Pattern

Location: `frontend/src/api.js`

### Axios Interceptors

**Request interceptor** - adds JWT token:
```javascript
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})
```

**Response interceptor** - handles 401:
```javascript
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      window.location.reload()
    }
    return Promise.reject(error)
  }
)
```

### API Modules

- `projectsApi` - CRUD projects
- `presetsApi` - Ready templates
- `deploymentApi` - Deployment instructions
- `authApi` - login, logout, me, setup
- `usersApi` - user management (admin only)
- `containersApi` - container management (admin only)

## Form Patterns

### Safari Password AutoFill

Use NATIVE inputs for passwords:

```vue
<form @submit.prevent="handleSubmit" method="post">
  <input 
    id="password"
    name="password"
    v-model="password" 
    type="password"
    class="p-inputtext p-component w-full"
    autocomplete="new-password"
    passwordrules="minlength: 6;"
  />
  <button type="submit">Submit</button>
</form>
```

**Required for Safari:**
- `<form>` tag with method="post"
- Native `<input>` for password
- `name` attribute
- `autocomplete="new-password"` (registration) or `autocomplete="current-password"` (login)
- `type="submit"` button

### Error Handling

Convert FastAPI 422 validation errors to readable messages:

```javascript
catch (err) {
  if (err.response?.status === 422 && err.response?.data?.detail) {
    const details = err.response.data.detail
    if (Array.isArray(details)) {
      const fieldErrors = details.map(d => {
        const field = d.loc?.[d.loc.length - 1] || 'field'
        return `${field}: ${d.msg}`
      }).join(', ')
      error.value = fieldErrors
    } else {
      error.value = details
    }
  } else {
    error.value = err.response?.data?.detail || 'Operation failed'
  }
}
```

## Authentication Flow

1. Check if setup needed: `GET /api/auth/setup/check`
2. If `setup_needed: true` → show Setup.vue
3. If `setup_needed: false` → show Login.vue
4. After login → save token to localStorage AND cookie
5. Call `GET /api/auth/me` to get user info
6. Save user to localStorage
7. All API requests auto-include token via interceptor

### Cookie Storage (for Traefik Dashboard)

```javascript
// Save JWT to cookie for dashboard access
document.cookie = `token=${access_token}; path=/; max-age=2592000; SameSite=Lax`
```

Files: `frontend/src/Login.vue`, `frontend/src/Setup.vue`

## Component Communication

- Use PrimeVue Toast for notifications
- Use PrimeVue ConfirmDialog for confirmations
- Use Vue Router for navigation between views
- Store auth state in App.vue, pass via router

## PrimeVue Components

DockLite uses PrimeVue for UI:
- DataTable - for lists
- Dialog - for modals
- Button - for actions
- InputText - for text inputs
- Dropdown - for selects
- Toast - for notifications
- ConfirmDialog - for confirmations

**Documentation:** https://primevue.org/

## Best Practices

### ✅ DO

- Use Composition API (not Options API)
- Extract reusable logic to composables
- Use constants for magic values
- Use utils for pure functions
- Handle errors gracefully
- Save token to both localStorage AND cookie
- Use PrimeVue components consistently

### ❌ DON'T

- Don't use Options API
- Don't hardcode values
- Don't duplicate logic across components
- Don't forget error handling
- Don't store sensitive data in localStorage beyond tokens
- Don't skip cookie storage (needed for Traefik Dashboard)
