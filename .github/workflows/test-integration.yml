name: Integration Tests

on:
  push:
    branches: [main, dev]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/test-integration.yml'
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Prepare test environment
        run: |
          mkdir -p /tmp/docklite-test-projects
          chmod 777 /tmp/docklite-test-projects
          # Create .env file for Docker Compose
          echo "PROJECTS_DIR=/tmp/docklite-test-projects" > .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "HOSTNAME=localhost" >> .env

      - name: Start DockLite
        run: docker compose up -d

      - name: Wait for backend
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost/api/health 2>/dev/null; then
              echo "Backend is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Backend failed to start"
              docker compose logs backend
              exit 1
            fi
            echo "Attempt $i/30: Backend not ready yet..."
            sleep 2
          done

      - name: Wait for Traefik
        run: |
          echo "Waiting for Traefik to be ready..."
          for i in {1..30}; do
            if docker compose ps traefik | grep -q "Up"; then
              echo "Traefik is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Traefik failed to start"
              docker compose logs traefik
              exit 1
            fi
            echo "Attempt $i/30: Traefik not ready yet..."
            sleep 2
          done

      - name: Create test user
        run: |
          docker compose exec -T backend python create_user.py cursor "CursorAI_Test2024!" --admin || echo "User may already exist"

      - name: Install backend dependencies on runner
        run: |
          pip install -r backend/requirements.txt

      - name: Run integration tests
        env:
          DATABASE_URL: sqlite+aiosqlite:////tmp/docklite.db
          PROJECTS_DIR: /tmp/docklite-test-projects
        run: |
          cd backend && pytest \
            tests/test_integration/test_deployment/ \
            -v \
            --tb=short \
            -m integration

      - name: Show docker compose logs on failure
        if: failure()
        run: docker compose logs

      - name: Cleanup
        if: always()
        run: docker compose down -v

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: |
            backend/logs/
          retention-days: 7

