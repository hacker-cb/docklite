name: Integration Tests

on:
  push:
    branches: [main, dev]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/test-integration.yml'
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Prepare test environment
        run: |
          mkdir -p /tmp/docklite-test-projects
          chmod 777 /tmp/docklite-test-projects
          # Backup existing .env if present
          if [ -f .env ]; then
            mv .env .env.backup
          fi
          # Create .env file for Docker Compose
          echo "PROJECTS_DIR=/tmp/docklite-test-projects" > .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "HOSTNAME=localhost" >> .env
          echo "TRAEFIK_DASHBOARD_HOST=localhost" >> .env
          # Verify .env file
          echo "Contents of .env:"
          cat .env

      - name: Start DockLite
        run: docker compose up -d
        
      - name: Verify backend environment
        run: |
          echo "Checking backend container environment..."
          docker compose exec -T backend env | grep PROJECTS_DIR || echo "PROJECTS_DIR not found in backend!"
          echo "Checking backend Settings value..."
          docker compose exec -T backend python -c "from app.core.config import settings; print(f'Settings.PROJECTS_DIR={settings.PROJECTS_DIR}')"

      - name: Wait for backend
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost/api/health 2>/dev/null; then
              echo "Backend is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Backend failed to start"
              docker compose logs backend
              exit 1
            fi
            echo "Attempt $i/30: Backend not ready yet..."
            sleep 2
          done

      - name: Wait for Traefik
        run: |
          echo "Waiting for Traefik to be ready..."
          for i in {1..30}; do
            if docker compose ps traefik | grep -q "Up"; then
              echo "Traefik is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Traefik failed to start"
              docker compose logs traefik
              exit 1
            fi
            echo "Attempt $i/30: Traefik not ready yet..."
            sleep 2
          done

      - name: Create test user
        run: |
          docker compose exec -T backend python create_user.py cursor "CursorAI_Test2024!" --admin || echo "User may already exist"

      - name: Install backend dependencies on runner
        run: |
          pip install -r backend/requirements.txt

      - name: Run integration tests
        env:
          DATABASE_URL: sqlite+aiosqlite:////tmp/docklite.db
          PROJECTS_DIR: /tmp/docklite-test-projects
        run: |
          cd backend && pytest \
            tests/test_integration/test_deployment/ \
            -v \
            --tb=short \
            -m integration
            
      - name: Validate Full Stack preset (Docker network test)
        run: |
          echo "üöÄ Deploying Full Stack example for validation..."
          
          # Create project via API
          TOKEN=$(curl -s -X POST http://localhost/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"cursor","password":"CursorAI_Test2024!"}' \
            | jq -r '.access_token')
          
          RESPONSE=$(curl -s -X POST http://localhost/api/projects \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Full Stack Validation",
              "domain": "fullstack-validate.local",
              "preset_id": "fullstack-hello"
            }')
          
          PROJECT_ID=$(echo $RESPONSE | jq -r '.id')
          PROJECT_SLUG=$(echo $RESPONSE | jq -r '.slug')
          echo "Created project: $PROJECT_SLUG (ID: $PROJECT_ID)"
          
          # Copy example files
          EXAMPLE_DIR="backend/app/presets/examples/fullstack-hello"
          PROJECT_DIR="/tmp/docklite-test-projects/$PROJECT_SLUG"
          
          cp -r $EXAMPLE_DIR/frontend $PROJECT_DIR/
          cp -r $EXAMPLE_DIR/backend $PROJECT_DIR/
          cp $EXAMPLE_DIR/nginx.conf $PROJECT_DIR/
          
          # Deploy
          cd $PROJECT_DIR
          docker compose up -d
          
          # Wait for containers
          echo "‚è≥ Waiting 30s for containers to install dependencies..."
          sleep 30
          
          # Run validation from inside Docker network
          echo "üîç Running validation script..."
          WORKSPACE_DIR=$(pwd)
          cd /home/runner/work/docklite/docklite
          docker run --rm --network docklite-network \
            -v $PWD/backend/tests/test_integration/test_deployment/validate_fullstack.sh:/validate.sh:ro \
            alpine:latest \
            sh -c "apk add --no-cache curl bash && bash /validate.sh fullstack-validate.local $PROJECT_SLUG"
          
          # Cleanup
          cd $WORKSPACE_DIR
          cd $PROJECT_DIR
          docker compose down -v
          cd ..
          rm -rf $PROJECT_DIR
          
          curl -X DELETE "http://localhost/api/projects/$PROJECT_ID" \
            -H "Authorization: Bearer $TOKEN" || true
          
          echo "‚úÖ Full Stack validation complete!"

      - name: Show docker compose logs on failure
        if: failure()
        run: docker compose logs

      - name: Cleanup
        if: always()
        run: docker compose down -v

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: |
            backend/logs/
          retention-days: 7

