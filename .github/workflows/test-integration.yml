name: Integration Tests

on:
  push:
    branches: [main, dev]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/test-integration.yml'
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Start DockLite
        run: docker compose up -d

      - name: Wait for backend
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "Backend is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Backend failed to start"
              docker compose logs backend
              exit 1
            fi
            echo "Attempt $i/30: Backend not ready yet..."
            sleep 2
          done

      - name: Wait for Traefik
        run: |
          echo "Waiting for Traefik to be ready..."
          for i in {1..30}; do
            if docker compose ps traefik | grep -q "Up"; then
              echo "Traefik is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Traefik failed to start"
              docker compose logs traefik
              exit 1
            fi
            echo "Attempt $i/30: Traefik not ready yet..."
            sleep 2
          done

      - name: Create test user
        run: |
          docker compose exec -T backend python -c "
          import asyncio
          from app.core.database import get_db_session
          from app.models.user import User
          from app.services.auth_service import AuthService
          
          async def create_user():
              async for db in get_db_session():
                  # Check if user exists
                  existing = await db.execute('SELECT * FROM users WHERE username = \"cursor\"')
                  if existing.fetchone():
                      print('User already exists')
                      return
                  
                  # Create user
                  auth_service = AuthService(db)
                  user = User(
                      username='cursor',
                      is_admin=True
                  )
                  user.hashed_password = auth_service.get_password_hash('CursorAI_Test2024!')
                  db.add(user)
                  await db.commit()
                  print('Test user created')
                  break
          
          asyncio.run(create_user())
          "

      - name: Run integration tests
        run: |
          docker compose exec -T backend pytest \
            tests/test_integration/test_deployment/ \
            -v \
            --tb=short \
            -m integration

      - name: Show docker compose logs on failure
        if: failure()
        run: docker compose logs

      - name: Cleanup
        if: always()
        run: docker compose down -v

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: |
            backend/logs/
          retention-days: 7

