name: E2E Tests

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/test-e2e.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/test-e2e.yml'
  workflow_dispatch:  # Manual trigger

jobs:
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Make CLI executable
        run: chmod +x ./docklite

      - name: Make CLI executable
        run: chmod +x ./docklite

      - name: Setup DockLite development environment
        run: ./docklite setup-dev

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: Start DockLite services
        run: |
          ./docklite start
          echo "⏳ Waiting for services to be ready..."
          sleep 15

      - name: Wait for backend to be ready
        run: |
          echo "🔍 Checking backend health..."
          for i in {1..30}; do
            if curl -f http://localhost/api/health 2>/dev/null; then
              echo "✅ Backend is ready!"
              exit 0
            fi
            echo "⏳ Waiting for backend... (attempt $i/30)"
            sleep 2
          done
          echo "❌ Backend did not start in time"
          docker compose logs backend
          exit 1

      - name: Wait for frontend to be ready
        run: |
          echo "🔍 Checking frontend..."
          for i in {1..30}; do
            if curl -f http://localhost/ 2>/dev/null; then
              echo "✅ Frontend is ready!"
              exit 0
            fi
            echo "⏳ Waiting for frontend... (attempt $i/30)"
            sleep 2
          done
          echo "❌ Frontend did not start in time"
          docker compose logs frontend
          exit 1

      - name: Create test users
        run: |
          echo "👤 Creating admin user: cursor"
          ./docklite user add cursor -p "CursorAI_Test2024!" --admin --email "cursor@test.local"
          
          echo "👤 Creating regular user: testuser"
          ./docklite user add testuser -p "TestUser_2024!" --email "testuser@test.local"
          
          echo "✅ Test users created"

      - name: Verify test users
        run: |
          echo "📋 Verifying test users..."
          
          # Test cursor user login
          response=$(curl -s -X POST http://localhost/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"cursor","password":"CursorAI_Test2024!"}')
          
          if echo "$response" | grep -q "access_token"; then
            echo "✅ Admin user 'cursor' can login"
          else
            echo "❌ Admin user 'cursor' login failed"
            echo "Response: $response"
            exit 1
          fi
          
          # Test testuser login
          response=$(curl -s -X POST http://localhost/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","password":"TestUser_2024!"}')
          
          if echo "$response" | grep -q "access_token"; then
            echo "✅ Regular user 'testuser' can login"
          else
            echo "❌ Regular user 'testuser' login failed"
            echo "Response: $response"
            exit 1
          fi

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload test videos (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: frontend/test-results/
          retention-days: 7

      - name: Show service logs (on failure)
        if: failure()
        run: |
          echo "::group::Backend Logs"
          docker compose logs backend
          echo "::endgroup::"
          
          echo "::group::Frontend Logs"
          docker compose logs frontend
          echo "::endgroup::"
          
          echo "::group::Traefik Logs"
          docker compose logs traefik
          echo "::endgroup::"

      - name: Cleanup
        if: always()
        run: |
          ./docklite stop
          docker compose down -v

  e2e-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "╔═══════════════════════════════════════════════════════════════╗"
          echo "║                    E2E Test Results                          ║"
          echo "╚═══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "E2E Tests:          ${{ needs.e2e-tests.result }}"
          echo ""
          
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All E2E tests passed!"
            echo ""
            echo "📊 Test Coverage:"
            echo "   - 7 Authentication tests"
            echo "   - 9 Admin user tests"
            echo "   - 8 Non-admin user tests"
            echo "   - Total: 24 E2E tests"
            exit 0
          else
            echo "❌ E2E tests failed"
            echo ""
            echo "💡 Tips:"
            echo "   - Check playwright-report artifact for details"
            echo "   - Review service logs in the failed job"
            echo "   - Run tests locally: ./docklite test-e2e --ui"
            exit 1
          fi

